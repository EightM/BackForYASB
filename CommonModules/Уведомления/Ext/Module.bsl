
&Вместо("ОтправитьУведомления")
Процедура TG_ОтправитьУведомления()
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПоследнейРассылки = Константы.ДатаПоследнейРассылки.Получить();
	
	// Если рассылку не удалось выполнить в течение 24 часов,она перестает быть актуальной
	ДатаАктуальностиОтправкиПочты 	= ТекущаяДата() - 86400;
	Если ДатаАктуальностиОтправкиПочты > ДатаПоследнейРассылки Тогда
		ДатаПоследнейРассылки = ДатаАктуальностиОтправкиПочты;
		Константы.ДатаПоследнейРассылки.Установить(ДатаПоследнейРассылки);
	КонецЕсли;
	
	// Каждый сервис, который хочет отправить почтовое сообщение, готовит его и добавляет
	// его вместе с ДатойРассылки в ТаблицуОтправкиПочты.
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ДатаРассылки");
	ТаблицаСообщений.Колонки.Добавить("ПараметрыПисьма");
	ТаблицаСообщений.Колонки.Добавить("СообщениеОтправлено");
	
	ТаблицаСообщений.Индексы.Добавить("ДатаРассылки");
	
	////////////////////////////////////////////////////////////////////////////////
	// Сервисы отправки почты
	
	ВерхняяГраницаПоДате = ТекущаяДата();
	
	ПроектыДляРассылкиПоТехническимПроектам = Новый Массив;
	ПроектыДляРассылкиПоЗадачам = Новый Массив;
	ПроектыДляРассылкиПоОшибкам = Новый Массив;
	
	ТаблицаПроектовДляРассылки = ПолучитьПроектыДляРассылки();
	
	Для Каждого СтрокаТаблицы из ТаблицаПроектовДляРассылки Цикл
		
		Если СтрокаТаблицы.РассылатьУведомленияПоЗадачам Тогда
			ПроектыДляРассылкиПоЗадачам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
		Если СтрокаТаблицы.РассылатьУведомленияПоОшибкам Тогда
			ПроектыДляРассылкиПоОшибкам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
		Если СтрокаТаблицы.РассылатьУведомленияПоТехническимПроектам Тогда
			ПроектыДляРассылкиПоТехническимПроектам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
	КонецЦикла;
	
	РасположениеИБ = РасположениеИнформационнойБазы();
	
	АдресИБВЛокальнойСети = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВЛокальнойСети();
	АдресИБВИнтернет = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВИнтернете();
	
	ИспользоватьВнешниеСсылки = ЗначениеЗаполнено(АдресИБВЛокальнойСети) ИЛИ ЗначениеЗаполнено(АдресИБВИнтернет);
	
	ПараметрыРассылки = Новый Структура;
	ПараметрыРассылки.Вставить("ДатаПоследнейРассылки", ДатаПоследнейРассылки);
	ПараметрыРассылки.Вставить("ВерхняяГраницаПоДате", ВерхняяГраницаПоДате);
	ПараметрыРассылки.Вставить("РасположениеИБ", РасположениеИБ);
	ПараметрыРассылки.Вставить("АдресИБВЛокальнойСети", АдресИБВЛокальнойСети);
	ПараметрыРассылки.Вставить("АдресИБВИнтернет", АдресИБВИнтернет);
	ПараметрыРассылки.Вставить("ИспользоватьВнешниеСсылки", ИспользоватьВнешниеСсылки);
	
	ДобавитьУведомленияПоЗадачамПроцессов(ТаблицаСообщений, ПроектыДляРассылкиПоЗадачам, ПараметрыРассылки);
	TG_ОтправкаУведомленийТелеграм.ОтправитьУведомленияПоЗадачамПроцесса(ДатаПоследнейРассылки, 
												ПроектыДляРассылкиПоЗадачам, ПараметрыРассылки);
	
	ДобавитьУведомленияПоНаправленнымОшибкам(ТаблицаСообщений, ПроектыДляРассылкиПоОшибкам, ПараметрыРассылки);
	TG_ОтправкаУведомленийТелеграм.ОтправитьУведомленияПоНаправленнымОшибкам(ДатаПоследнейРассылки, 
												ПроектыДляРассылкиПоЗадачам, ПараметрыРассылки);
	
	ДобавитьУведомленияПоИсправленнымОшибкам(ТаблицаСообщений, ПроектыДляРассылкиПоОшибкам, ПараметрыРассылки);
	
	ДобавитьУведомленияПоСогласованиюТехническихПроектов(ТаблицаСообщений, ПроектыДляРассылкиПоТехническимПроектам, ПараметрыРассылки);
	
	ДобавитьУведомленияПоДвижениюТехническихПроектов(ТаблицаСообщений, ПроектыДляРассылкиПоТехническимПроектам, ПараметрыРассылки);
	
	ДобавитьУведомленияПоСтатусамТехническихПроектов(ТаблицаСообщений, ПроектыДляРассылкиПоТехническимПроектам, ПараметрыРассылки);
	
	////////////////////////////////////////////////////////////////////////////////
	
	// Сортируем сообщения по дате рассылки
	ТаблицаСообщений.Сортировать("ДатаРассылки Возр");
	
	УчетнаяЗаписьСервера = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	// Если сообщение не удалось отправить в течение 3 попыток, в то же время другие сообщения
	// в этой рассылке были отправлены, то полагаем, что сообщение быть доставлено не может
	КоличествоПопытокОтправкиПочты = 3;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Информация,,НСтр("ru = 'Начата отправка'") );
	
	Для НомерПопытки = 1 По КоличествоПопытокОтправкиПочты Цикл
		
		Если ТаблицаСообщений.Количество() = 0 Тогда
			Прервать;		// Сообщений для отправки нет
		КонецЕсли;
		// Отправляем сообщения в цикле
		Для Каждого Строка Из ТаблицаСообщений Цикл
			Если Строка.СообщениеОтправлено Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьСервера, Строка.ПараметрыПисьма);
				Строка.СообщениеОтправлено = Истина;
				Если Строка.ДатаРассылки > ДатаПоследнейРассылки Тогда
					ДатаПоследнейРассылки = Строка.ДатаРассылки;
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Ошибка,,ИнформацияОбОшибке().Описание);
			КонецПопытки;
		КонецЦикла; // Отправка сообщений
	КонецЦикла;     // Попытка отправить
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Информация,,НСтр("ru = 'Завершена отправка'") );
	
	// Устанавливаем константу при необходимости
	Если ДатаПоследнейРассылки > Константы.ДатаПоследнейРассылки.Получить() Тогда
		Константы.ДатаПоследнейРассылки.Установить(ДатаПоследнейРассылки);
	КонецЕсли;
	
КонецПроцедуры
